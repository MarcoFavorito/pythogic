import re
from itertools import chain, combinations


# https://docs.python.org/3/library/itertools.html#recipes
from pythogic.base.Alphabet import Alphabet


def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(set(iterable))
    combs = chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
    res = set(frozenset(x) for x in combs)
    # res = map(frozenset, combs)
    return res


def my_str(obj):
    s = str(obj)
    s = re.sub("frozenset\(\)", "{}", s)
    s = re.sub("frozenset\(\{(.*)\}\)", "{\g<1>}", s)
    return s

def _to_PySimpleAutomata_nfa(nfa:dict):
    """Generate a nfa (according to PySimpleAutomata specifications)
    given a NFA dictionary generated by
    the method LDLf_EmptyTraces.to_nfa"""

    import pythogic.automaton.NFA
    res = pythogic.automaton.NFA.NFA.fromTransitions(Alphabet(nfa["alphabet"]), nfa["states"], nfa["initial_states"],
                              nfa["accepting_states"], nfa["transitions"])

    return res


def _to_PySimpleAutomata_dfa(nfa:dict):
    """Generate a DFA (according to PySimpleAutomata specifications)
        given a NFA dictionary generated by
        the method LDLf_EmptyTraces.to_nfa"""
    res = _to_PySimpleAutomata_nfa(nfa)
    import pythogic.automaton.DFA
    import pythogic.automaton.NFA
    res = pythogic.automaton.NFA.NFA.determinize(res)
    res = pythogic.automaton.DFA.DFA.minimize(res)
    res = pythogic.automaton.DFA.DFA.trim(res)

    return res


def print_nfa(nfa:dict, name, path="./"):
    """Converts the NFA into a PySimpleAutomata.NFA
    Then draw the NFA in .svg format.
    :param nfa:
    """
    res = _to_PySimpleAutomata_nfa(nfa)
    res.to_dot(path + "/" + name)

def print_dfa(nfa:dict, name, path="./"):
    """Converts the NFA into a PySimpleAutomata.DFA
    Then draw the NFA in .svg format."""
    res = _to_PySimpleAutomata_dfa(nfa)
    res.to_dot(path + "/" + name)



